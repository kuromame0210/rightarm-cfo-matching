'use client'

import { useState, useEffect, useCallback, useMemo } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import Image from 'next/image'
import AppHeader from '@/components/AppHeader'
import Loading from '@/components/Loading'
import { useInterests } from '@/lib/interests-context'
import { useAuth } from '@/lib/hooks/useAuth'
import { useNetworkStatus } from '@/hooks/useNetworkStatus'
import { isNetworkError, getNetworkErrorMessage } from '@/utils/api'

// Force dynamic rendering to avoid auth context issues during static generation
export const dynamic = 'force-dynamic'

export default function DiscoverCFOsPage() {
  const { isAuthenticated, isLoading, user } = useAuth()
  const router = useRouter()
  const { isInterested, toggleInterest } = useInterests()
  const { isOnline } = useNetworkStatus()

  const [searchQuery, setSearchQuery] = useState('')
  const [selectedSkills, setSelectedSkills] = useState<string[]>([])
  const [selectedRegion, setSelectedRegion] = useState('')
  const [selectedWorkStyle, setSelectedWorkStyle] = useState('')
  const [selectedCompensation, setSelectedCompensation] = useState('')
  const [sortBy, setSortBy] = useState('newest')
  const [showMobileFilters, setShowMobileFilters] = useState(false)
  const [showToast, setShowToast] = useState(false)
  const [toastMessage, setToastMessage] = useState('')
  const [showScoutModal, setShowScoutModal] = useState(false)
  const [selectedCFO, setSelectedCFO] = useState<any>(null)
  const [isSearching, setIsSearching] = useState(false)
  const [cfos, setCfos] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 10,
    total: 0,
    totalPages: 0
  })

  // „Éû„Çπ„Çø„Éº„Éá„Éº„Çø„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ
  const [skillCategories, setSkillCategories] = useState<string[]>([])
  const [regions, setRegions] = useState<any[]>([])
  const [workStyles, setWorkStyles] = useState<any[]>([])
  const [compensationRanges, setCompensationRanges] = useState<string[]>([])
  const [masterDataLoading, setMasterDataLoading] = useState(true)
  const sortOptions = [
    { value: 'newest', label: 'Êñ∞ÁùÄÈ†Ü' },
    { value: 'compensation_high', label: 'Â†±ÈÖ¨È´òÈ†Ü' },
    { value: 'rating', label: 'Ë©ï‰æ°È†Ü' },
    { value: 'experience', label: 'ÁµåÈ®ìÈ†Ü' }
  ]

  // „Éû„Çπ„Çø„Éº„Éá„Éº„Çø„ÇíÂõ∫ÂÆöÂÄ§„ÅßË®≠ÂÆöÔºàEssentialProfileInputs.tsx„Å®Áµ±‰∏ÄÔºâ
  const fetchMasterData = async () => {
    try {
      setMasterDataLoading(true)
      
      // üÜï Âõ∫ÂÆö„Éá„Éº„ÇøË®≠ÂÆöÔºà„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ„Å®Áµ±‰∏ÄÔºâ
      const defaultSkills = [
        'M&AÊîØÊè¥', 'IPO„Çµ„Éù„Éº„Éà', 'Ë≥áÈáëË™øÈÅî', 'ÁÆ°ÁêÜ‰ºöË®à', 'Ë≤°ÂãôÂàÜÊûê',
        '‰∫àÁÆóÁÆ°ÁêÜ', 'Âéü‰æ°Ë®àÁÆó', 'Ë≥áÈáëÁÆ°ÁêÜ', 'ÁµåÂñ∂‰ºÅÁîª', 'ÊäïË≥áË®àÁîª',
        'Á®éÂãôÂØæÂøú', 'Áõ£ÊüªÂØæÂøú', 'ÂÜÖÈÉ®Áµ±Âà∂', 'Ê•≠Á∏æÁÆ°ÁêÜ', 'Êµ∑Â§ñÊ•≠Âãô'
      ]
      
      const defaultRegions = [
        { id: 'all', name: 'ÂÖ®ÂõΩ' },
        { id: 'kanto', name: 'Èñ¢Êù±„Ç®„É™„Ç¢' },
        { id: 'kansai', name: 'Èñ¢Ë•ø„Ç®„É™„Ç¢' },
        { id: 'chubu', name: '‰∏≠ÈÉ®„Ç®„É™„Ç¢' },
        { id: 'tohoku', name: 'Êù±Âåó„Ç®„É™„Ç¢' },
        { id: 'kyushu', name: '‰πùÂ∑û„Ç®„É™„Ç¢' }
      ]
      
      const defaultWorkStyles = [
        { id: '1', name: 'ÈÄ±1Êó•' },
        { id: '2', name: 'ÈÄ±2Êó•' },
        { id: '3', name: 'ÈÄ±3Êó•' },
        { id: '4', name: 'ÈÄ±4Êó•' },
        { id: '5', name: 'ÈÄ±5Êó•Ôºà„Éï„É´„Çø„Ç§„É†Ôºâ' }
      ]
      
      setSkillCategories(defaultSkills)
      setRegions(defaultRegions)
      setWorkStyles(defaultWorkStyles)
      
      // üÜï Â†±ÈÖ¨Ê§úÁ¥¢„Çí250‰∏áÂÜÜ‰ª•‰∏ã„Åæ„ÅßÂØæÂøú
      setCompensationRanges([
        'ÂøúÁõ∏Ë´á', 'ÊúàÈ°çÂà∂Ôºö20‰∏áÂÜÜ‰ª•‰∏ã', 'ÊúàÈ°çÂà∂Ôºö30‰∏áÂÜÜ‰ª•‰∏ã', 'ÊúàÈ°çÂà∂Ôºö50‰∏áÂÜÜ‰ª•‰∏ã', 'ÊúàÈ°çÂà∂Ôºö80‰∏áÂÜÜ‰ª•‰∏ã', 'ÊúàÈ°çÂà∂Ôºö100‰∏áÂÜÜ‰ª•‰∏ã', 'ÊúàÈ°çÂà∂Ôºö150‰∏áÂÜÜ‰ª•‰∏ã', 'ÊúàÈ°çÂà∂Ôºö200‰∏áÂÜÜ‰ª•‰∏ã', 'ÊúàÈ°çÂà∂Ôºö250‰∏áÂÜÜ‰ª•‰∏ã'
      ])

    } catch (error) {
      console.error('Master data setup error:', error)
      showToastMessage('Ë®≠ÂÆö„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
    } finally {
      setMasterDataLoading(false)
    }
  }

  useEffect(() => {
    fetchMasterData()
  }, [])

  // Êñ∞„Åó„ÅÑAPI„É¨„Çπ„Éù„É≥„ÇπÂΩ¢Âºè„Å´ÂØæÂøúÔºàformatCFODataÈñ¢Êï∞„ÅØ‰∏çË¶ÅÔºâ
  // API„Åã„ÇâÊó¢„Å´Êï¥ÂΩ¢„Åï„Çå„Åü„Éá„Éº„Çø„ÅåËøî„Å£„Å¶„Åè„Çã„Åü„ÇÅ„ÄÅ„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®
  const displayCFOs = cfos

  // Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ„Å®CFO„Éá„Éº„ÇøÂèñÂæó
  useEffect(() => {
    if (isAuthenticated === false) {
      // Êú™Ë™çË®º„ÅÆÂ†¥Âêà„ÅØ„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å´„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
      router.push('/auth/login')
      return
    }
    
    if (isAuthenticated) {
      fetchCFOs()
    }
  }, [isAuthenticated, router])

  const toggleSkill = (skill: string) => {
    setSelectedSkills(prev =>
      prev.includes(skill)
        ? prev.filter((s: string) => s !== skill)
        : [...prev, skill]
    )
  }

  const showToastMessage = (message: string) => {
    setToastMessage(message)
    setShowToast(true)
    setTimeout(() => setShowToast(false), 3000)
  }

  // CFO„Éá„Éº„Çø„ÇíAPI„Åã„ÇâÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  const fetchCFOs = useCallback(async () => {
    try {
      setLoading(true)
      
      if (!isOnline) {
        showToastMessage('„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
        return
      }
      
      const params = new URLSearchParams({
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
      })
      
      if (searchQuery) params.append('search', searchQuery)
      if (selectedRegion && selectedRegion !== 'ÂÖ®ÂõΩ') {
        if (selectedRegion === 'Èñ¢Êù±„Ç®„É™„Ç¢') params.append('regions', 'kanto')
        else if (selectedRegion === 'Èñ¢Ë•ø„Ç®„É™„Ç¢') params.append('regions', 'kansai')
        else if (selectedRegion === '‰∏≠ÈÉ®„Ç®„É™„Ç¢') params.append('regions', 'chubu')
        else if (selectedRegion === 'Êù±Âåó„Ç®„É™„Ç¢') params.append('regions', 'tohoku')
        else if (selectedRegion === '‰πùÂ∑û„Ç®„É™„Ç¢') params.append('regions', 'kyushu')
      }
      if (selectedSkills.length > 0) params.append('skills', selectedSkills.join(','))
      
      // üÜï Á®ºÂÉçÂΩ¢ÊÖã„Éï„Ç£„É´„Çø„Çí‰øÆÊ≠£ÔºàÈÄ±Êó•Êï∞„Å®„Åó„Å¶ÈÄÅ‰ø°Ôºâ
      if (selectedWorkStyle && selectedWorkStyle !== '') {
        if (selectedWorkStyle === 'ÈÄ±1Êó•') params.append('weeklyDays', '1')
        else if (selectedWorkStyle === 'ÈÄ±2Êó•') params.append('weeklyDays', '2')
        else if (selectedWorkStyle === 'ÈÄ±3Êó•') params.append('weeklyDays', '3')
        else if (selectedWorkStyle === 'ÈÄ±4Êó•') params.append('weeklyDays', '4')
        else if (selectedWorkStyle === 'ÈÄ±5Êó•Ôºà„Éï„É´„Çø„Ç§„É†Ôºâ') params.append('weeklyDays', '5')
      }
      
      // üÜï Â†±ÈÖ¨„Éï„Ç£„É´„Çø„Çí„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜË®≠Ë®à„Å´Âêà„Çè„Åõ„Å¶ÊîπÂñÑ
      if (selectedCompensation && selectedCompensation !== '') {
        if (selectedCompensation === 'ÂøúÁõ∏Ë´á') {
          // ÂøúÁõ∏Ë´á„ÅÆCFO„ÅÆ„Åø
          params.append('compensationType', 'negotiable')
        } else if (selectedCompensation.startsWith('ÊúàÈ°çÂà∂Ôºö')) {
          // ÊúàÈ°çÂà∂„Åß‰∫àÁÆó‰∏äÈôêÊåáÂÆöÊ§úÁ¥¢
          params.append('compensationType', 'monthly')
          
          if (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö20‰∏áÂÜÜ‰ª•‰∏ã') {
            params.append('budgetMax', '200000')
          } else if (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö30‰∏áÂÜÜ‰ª•‰∏ã') {
            params.append('budgetMax', '300000')
          } else if (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö50‰∏áÂÜÜ‰ª•‰∏ã') {
            params.append('budgetMax', '500000')
          } else if (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö80‰∏áÂÜÜ‰ª•‰∏ã') {
            params.append('budgetMax', '800000')
          } else if (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö100‰∏áÂÜÜ‰ª•‰∏ã') {
            params.append('budgetMax', '1000000')
          } else if (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö150‰∏áÂÜÜ‰ª•‰∏ã') {
            params.append('budgetMax', '1500000')
          } else if (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö200‰∏áÂÜÜ‰ª•‰∏ã') {
            params.append('budgetMax', '2000000')
          } else if (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö250‰∏áÂÜÜ‰ª•‰∏ã') {
            params.append('budgetMax', '2500000')
          }
        }
      }
      
      const response = await fetch(`/api/cfos?${params}`)
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const data = await response.json()
      
      if (data.success) {
        setCfos(data.data)
        setPagination(data.pagination)
      } else {
        console.error('CFO„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó:', data.error)
        showToastMessage('CFO‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
        setCfos([])
      }
    } catch (error) {
      console.error('CFO„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó:', error)
      if (isNetworkError(error)) {
        showToastMessage(getNetworkErrorMessage(error))
      } else {
        showToastMessage('CFO‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      }
      setCfos([])
    } finally {
      setLoading(false)
    }
  }, [pagination.page, pagination.limit, selectedSkills, selectedRegion, selectedWorkStyle, selectedCompensation, searchQuery, isOnline])

  // Ê§úÁ¥¢ÂÆüË°åÈñ¢Êï∞
  const handleSearch = useCallback(async () => {
    setIsSearching(true)
    await fetchCFOs()
    setIsSearching(false)
    showToastMessage('Ê§úÁ¥¢„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü')
  }, [fetchCFOs])

  // „É™„Çª„ÉÉ„ÉàÈñ¢Êï∞
  const handleReset = () => {
    setSearchQuery('')
    setSelectedSkills([])
    setSelectedRegion('')
    setSelectedWorkStyle('')
    setSelectedCompensation('')
    showToastMessage('Ê§úÁ¥¢Êù°‰ª∂„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü')
  }

  const handleInterested = async (cfo: any) => {
    try {
      
      const success = await toggleInterest(cfo.id, 'cfo')
      
      if (success) {
        const currentlyInterested = isInterested(cfo.id)
        const message = currentlyInterested 
          ? 'Ê∞ó„Å´„Å™„Çã„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü ‚ù§Ô∏è' 
          : 'Ê∞ó„Å´„Å™„Çã„Åã„ÇâÂâäÈô§„Åó„Åæ„Åó„Åü'
        showToastMessage(message)
        
        console.log('‚úÖ „ÅäÊ∞ó„Å´ÂÖ•„ÇäÊìç‰ΩúÊàêÂäü:', {
          cfoId: cfo.id,
          action: currentlyInterested ? 'added' : 'removed'
        })
      } else {
        console.warn('‚ùå „ÅäÊ∞ó„Å´ÂÖ•„ÇäÊìç‰ΩúÂ§±Êïó:', cfo.id)
        showToastMessage('Êìç‰Ωú„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ')
      }
    } catch (error) {
      console.error('‚ùå Ê∞ó„Å´„Å™„ÇãÊ©üËÉΩ„Ç®„É©„Éº:', error)
      
      // „Ç®„É©„Éº„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
      if (error instanceof Error) {
        showToastMessage(`„Ç®„É©„Éº: ${error.message}`)
      } else {
        showToastMessage('‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü')
      }
    }
  }

  const handleScout = (cfo: any) => {
    setSelectedCFO(cfo)
    setShowScoutModal(true)
  }

  const sendScout = async () => {
    const messageInput = document.querySelector('textarea')?.value?.trim()
    
    if (!messageInput) {
      showToastMessage('„Çπ„Ç´„Ç¶„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
      return
    }

    if (!selectedCFO) {
      showToastMessage('CFO„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
      return
    }

    try {
      const response = await fetch('/api/scouts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          recipientId: selectedCFO.id,
          recipientType: 'cfo',
          senderType: 'company',
          title: `${selectedCFO.name}„Åï„Çì„Å∏„ÅÆ„Çπ„Ç´„Ç¶„Éà`,
          message: messageInput,
          urgency: 'normal',
          metadata: {
            company_name: 'ÂãüÈõÜ‰ºÅÊ•≠',
            target_cfo: selectedCFO.name
          }
        })
      })

      const data = await response.json()
      
      if (response.ok && data.success) {
        showToastMessage(`${selectedCFO.name}„Åï„Çì„Å´„Çπ„Ç´„Ç¶„Éà„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü`)
        setShowScoutModal(false)
        setSelectedCFO(null)
      } else {
        console.error('„Çπ„Ç´„Ç¶„ÉàÈÄÅ‰ø°API „Ç®„É©„Éº:', response.status, data)
        showToastMessage(`„Ç®„É©„Éº: ${data.error || '„Çπ„Ç´„Ç¶„ÉàÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'}`)
      }
    } catch (error) {
      console.error('„Çπ„Ç´„Ç¶„ÉàÈÄÅ‰ø°„Ç®„É©„Éº:', error)
      showToastMessage('„Çπ„Ç´„Ç¶„Éà„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
    }
  }

  // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞Âá¶ÁêÜÔºà„É≠„Éº„Ç´„É´„Éï„Ç£„É´„Çø - API„Éï„Ç£„É´„Çø„ÇíË£úÂÆåÔºâ
  const filteredCFOs = useMemo(() => 
    displayCFOs.filter((cfo: any) => {
      const matchesSearch = searchQuery === '' || 
        cfo.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (cfo.displayName && cfo.displayName.toLowerCase().includes(searchQuery.toLowerCase())) ||
        cfo.skills.some((skill: string) => skill.toLowerCase().includes(searchQuery.toLowerCase())) ||
        (cfo.introduction && cfo.introduction.toLowerCase().includes(searchQuery.toLowerCase()))
      
      const matchesSkills = selectedSkills.length === 0 || 
        selectedSkills.some((skill: string) => cfo.skills.includes(skill))
      
      const matchesRegion = selectedRegion === '' || selectedRegion === 'ÂÖ®ÂõΩ' || 
        (cfo.structured?.supportedPrefectures && cfo.structured.supportedPrefectures.length > 0) ||
        cfo.structured?.fullRemoteAvailable
      
      // üÜï Á®ºÂÉçÂΩ¢ÊÖã„Éï„Ç£„É´„Çø„Çí‰øÆÊ≠£
      const matchesWorkStyle = selectedWorkStyle === '' ||
        (selectedWorkStyle === 'ÈÄ±1Êó•' && cfo.structured?.weeklyDays === 1) ||
        (selectedWorkStyle === 'ÈÄ±2Êó•' && cfo.structured?.weeklyDays === 2) ||
        (selectedWorkStyle === 'ÈÄ±3Êó•' && cfo.structured?.weeklyDays === 3) ||
        (selectedWorkStyle === 'ÈÄ±4Êó•' && cfo.structured?.weeklyDays === 4) ||
        (selectedWorkStyle === 'ÈÄ±5Êó•Ôºà„Éï„É´„Çø„Ç§„É†Ôºâ' && cfo.structured?.weeklyDays === 5) ||
        cfo.structured?.weeklyDaysFlexible // ÊüîËªüÂØæÂøúÂèØËÉΩ„Å™Â†¥Âêà„ÅØ„Éû„ÉÉ„ÉÅ
      
      // üÜï Â†±ÈÖ¨„Éï„Ç£„É´„ÇøÔºàAPIÊ§úÁ¥¢„Å®ÈÄ£Êê∫„ÄÅ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅØË£úÂÆåÁöÑÔºâ
      const matchesCompensation = selectedCompensation === '' ||
        (selectedCompensation === 'ÂøúÁõ∏Ë´á' && (
          cfo.structured?.compensationType === 'negotiable' || 
          (cfo.compensation && cfo.compensation.includes('ÂøúÁõ∏Ë´á'))
        )) ||
        // ÊúàÈ°çÂà∂„ÅÆÂ†¥ÂêàÔºöÂÖ∑‰ΩìÁöÑ„Å™‰∫àÁÆóÁØÑÂõ≤„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö20‰∏áÂÜÜ‰ª•‰∏ã' && cfo.structured?.compensationType === 'monthly' && (cfo.structured?.monthlyFeeMin || 0) <= 200000) ||
        (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö30‰∏áÂÜÜ‰ª•‰∏ã' && cfo.structured?.compensationType === 'monthly' && (cfo.structured?.monthlyFeeMin || 0) <= 300000) ||
        (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö50‰∏áÂÜÜ‰ª•‰∏ã' && cfo.structured?.compensationType === 'monthly' && (cfo.structured?.monthlyFeeMin || 0) <= 500000) ||
        (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö80‰∏áÂÜÜ‰ª•‰∏ã' && cfo.structured?.compensationType === 'monthly' && (cfo.structured?.monthlyFeeMin || 0) <= 800000) ||
        (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö100‰∏áÂÜÜ‰ª•‰∏ã' && cfo.structured?.compensationType === 'monthly' && (cfo.structured?.monthlyFeeMin || 0) <= 1000000) ||
        (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö150‰∏áÂÜÜ‰ª•‰∏ã' && cfo.structured?.compensationType === 'monthly' && (cfo.structured?.monthlyFeeMin || 0) <= 1500000) ||
        (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö200‰∏áÂÜÜ‰ª•‰∏ã' && cfo.structured?.compensationType === 'monthly' && (cfo.structured?.monthlyFeeMin || 0) <= 2000000) ||
        (selectedCompensation === 'ÊúàÈ°çÂà∂Ôºö250‰∏áÂÜÜ‰ª•‰∏ã' && cfo.structured?.compensationType === 'monthly' && (cfo.structured?.monthlyFeeMin || 0) <= 2500000)
      
      return matchesSearch && matchesSkills && matchesRegion && matchesWorkStyle && matchesCompensation
    }),
    [displayCFOs, searchQuery, selectedSkills, selectedRegion, selectedWorkStyle, selectedCompensation]
  )

  // „ÇΩ„Éº„ÉàÂá¶ÁêÜ
  const sortedCFOs = useMemo(() => 
    [...filteredCFOs].sort((a: any, b: any) => {
      switch (sortBy) {
        case 'newest':
          return new Date(b.registeredAt).getTime() - new Date(a.registeredAt).getTime()
        case 'compensation_high':
          // ÊßãÈÄ†Âåñ„Éá„Éº„Çø„ÅÆ‰∏ãÈôêÈáëÈ°ç„Åß„ÇΩ„Éº„ÉàÔºà‰∏ãÈôê„ÅåÈ´ò„ÅÑÈ†ÜÔºâ
          const aCompMin = a.structured?.monthlyFeeMin || (a.feeMin ? a.feeMin * 10000 : 0)
          const bCompMin = b.structured?.monthlyFeeMin || (b.feeMin ? b.feeMin * 10000 : 0)
          return bCompMin - aCompMin
        case 'rating':
          return b.rating - a.rating
        case 'experience':
          // ÁµåÈ®ìÂπ¥Êï∞„Åæ„Åü„ÅØÊßãÈÄ†Âåñ„Éá„Éº„Çø„ÅÆÁµåÈ®ìÂπ¥Êï∞„Çí‰ΩøÁî®
          const aExp = a.structured?.experienceYears || (a.experience ? a.experience.length / 100 : 0)
          const bExp = b.structured?.experienceYears || (b.experience ? b.experience.length / 100 : 0)
          return bExp - aExp
        default:
          return 0
      }
    }),
    [filteredCFOs, sortBy]
  )

  // Ë™çË®ºÁä∂ÊÖã„Åå‰∏çÊòé„ÅÆÈñì„ÅØ„É≠„Éº„Éá„Ç£„É≥„Ç∞ÁîªÈù¢„ÇíË°®Á§∫
  if (isAuthenticated === undefined) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loading size="lg" text="Ë™çË®ºÁä∂ÊÖã„ÇíÁ¢∫Ë™ç‰∏≠..." />
      </div>
    )
  }

  // Êú™Ë™çË®º„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇË°®Á§∫„Åó„Å™„ÅÑÔºà„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÂá¶ÁêÜ‰∏≠Ôºâ
  if (isAuthenticated === false) {
    return null
  }

  return (
    <>
      <div className="min-h-screen bg-gray-50 pb-16 md:pb-0">
        <AppHeader />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 md:py-8">

        {/* „Éö„Éº„Ç∏„Éò„ÉÉ„ÉÄ„Éº */}
        <div className="mb-6">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">CFOÊ§úÁ¥¢</h1>
          <p className="text-gray-600">„ÅÇ„Å™„Åü„ÅÆ‰ºÅÊ•≠„Å´ÊúÄÈÅ©„Å™CFO„ÇíË¶ã„Å§„Åë„Åæ„Åó„Çá„ÅÜ</p>
        </div>

        {/* „É¢„Éê„Ç§„É´Ê§úÁ¥¢„Éª„Éï„Ç£„É´„Çø„Éº„Éê„Éº */}
        <div className="md:hidden mb-4">
          <div className="bg-white rounded-lg shadow-sm p-4">
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="CFO„ÅÆÂêçÂâç„ÇÑ„Çπ„Ç≠„É´„ÅßÊ§úÁ¥¢"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm mb-3"
            />
            <button 
              onClick={() => setShowMobileFilters(!showMobileFilters)}
              className="w-full bg-gray-100 text-gray-700 py-2 rounded-lg text-sm hover:bg-gray-200 transition-colors"
            >
              Áµû„ÇäËæº„ÅøË®≠ÂÆö {showMobileFilters ? '‚ñ≤' : '‚ñº'}
            </button>
          </div>
        </div>

        {/* „É¢„Éê„Ç§„É´Áî®Áµû„ÇäËæº„Åø„Éë„Éç„É´ */}
        {showMobileFilters && (
          <div className="md:hidden mb-4">
            <div className="bg-white rounded-lg shadow-sm p-4">
              <h3 className="text-base font-semibold text-gray-900 mb-3">Ê§úÁ¥¢„ÉªÁµû„ÇäËæº„Åø</h3>
              
              {/* Â∞ÇÈñÄ„Çπ„Ç≠„É´ */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">Â∞ÇÈñÄ„Çπ„Ç≠„É´</label>
                <div className="flex flex-wrap gap-2 max-h-32 overflow-y-auto">
                  {skillCategories.map((skill: string) => (
                    <button
                      key={skill}
                      onClick={() => toggleSkill(skill)}
                      className={`px-3 py-1 rounded-full text-xs border transition-colors ${
                        selectedSkills.includes(skill)
                          ? 'bg-blue-50 text-blue-700 border-blue-200'
                          : 'bg-gray-50 text-gray-700 border-gray-200 hover:bg-gray-100'
                      }`}
                    >
                      {skill}
                    </button>
                  ))}
                </div>
              </div>

              {/* „Åù„ÅÆ‰ªñ„Éï„Ç£„É´„Çø„Éº */}
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Âú∞Âüü</label>
                  <select 
                    value={selectedRegion}
                    onChange={(e) => setSelectedRegion(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                  >
                    {regions.map((region: any) => (
                      <option key={region.id} value={region.id === 'all' ? '' : region.name}>{region.name}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Á®ºÂÉçÂΩ¢ÊÖã</label>
                  <select 
                    value={selectedWorkStyle}
                    onChange={(e) => setSelectedWorkStyle(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                  >
                    <option value="">„Åô„Åπ„Å¶</option>
                    {workStyles.map((style: any) => (
                      <option key={style.id} value={style.name}>{style.name}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">‰∏¶„Å≥Êõø„Åà</label>
                  <select 
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                  >
                    {sortOptions.map((option: any) => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="mt-4 flex gap-2">
                <button 
                  onClick={async () => {
                    await handleSearch()
                    setShowMobileFilters(false)
                  }}
                  disabled={isSearching}
                  className="flex-1 bg-blue-600 text-white py-2 rounded-lg text-sm hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isSearching ? 'Ê§úÁ¥¢‰∏≠...' : 'Ê§úÁ¥¢'}
                </button>
                <button 
                  onClick={handleReset}
                  className="px-4 bg-gray-100 text-gray-700 py-2 rounded-lg text-sm hover:bg-gray-200"
                >
                  „É™„Çª„ÉÉ„Éà
                </button>
              </div>
            </div>
          </div>
        )}

        <div className="flex flex-col lg:flex-row gap-6">
          {/* „Çµ„Ç§„Éâ„Éê„Éº - PCÁî®„Éï„Ç£„É´„Çø„Éº„Éë„Éç„É´ */}
          <div className="hidden lg:block lg:w-80">
            <div className="bg-white rounded-lg shadow-sm p-6 sticky top-24">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Ê§úÁ¥¢„ÉªÁµû„ÇäËæº„Åø</h3>
              
              {/* „Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢ */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢</label>
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="CFO„ÅÆÂêçÂâç„ÇÑ„Çπ„Ç≠„É´„ÅßÊ§úÁ¥¢"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {/* Â∞ÇÈñÄ„Çπ„Ç≠„É´ */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">Â∞ÇÈñÄ„Çπ„Ç≠„É´</label>
                <div className="flex flex-wrap gap-2 max-h-40 overflow-y-auto">
                  {skillCategories.map((skill: string) => (
                    <button
                      key={skill}
                      onClick={() => toggleSkill(skill)}
                      className={`px-3 py-1 rounded-full text-xs border transition-colors ${
                        selectedSkills.includes(skill)
                          ? 'bg-blue-50 text-blue-700 border-blue-200'
                          : 'bg-gray-50 text-gray-700 border-gray-200 hover:bg-gray-100'
                      }`}
                    >
                      {skill}
                    </button>
                  ))}
                </div>
              </div>

              {/* „Åù„ÅÆ‰ªñ„Éï„Ç£„É´„Çø„Éº */}
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Âú∞Âüü</label>
                  <select 
                    value={selectedRegion}
                    onChange={(e) => setSelectedRegion(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  >
                    {regions.map((region: any) => (
                      <option key={region.id} value={region.id === 'all' ? '' : region.name}>{region.name}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Á®ºÂÉçÂΩ¢ÊÖã</label>
                  <select 
                    value={selectedWorkStyle}
                    onChange={(e) => setSelectedWorkStyle(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  >
                    <option value="">„Åô„Åπ„Å¶</option>
                    {workStyles.map((style: any) => (
                      <option key={style.id} value={style.name}>{style.name}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Â†±ÈÖ¨</label>
                  <select 
                    value={selectedCompensation}
                    onChange={(e) => setSelectedCompensation(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  >
                    <option value="">„Åô„Åπ„Å¶</option>
                    {compensationRanges.map((range: string) => (
                      <option key={range} value={range}>{range}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">‰∏¶„Å≥Êõø„Åà</label>
                  <select 
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  >
                    {sortOptions.map((option: any) => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Ê§úÁ¥¢„Éª„É™„Çª„ÉÉ„Éà„Éú„Çø„É≥ */}
              <div className="mt-6 space-y-3">
                <button 
                  onClick={handleSearch}
                  disabled={isSearching}
                  className="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isSearching ? 'Ê§úÁ¥¢‰∏≠...' : 'Ê§úÁ¥¢'}
                </button>
                <button 
                  onClick={handleReset}
                  className="w-full bg-gray-100 text-gray-700 py-2 rounded-lg hover:bg-gray-200 transition-colors"
                >
                  Êù°‰ª∂„Çí„É™„Çª„ÉÉ„Éà
                </button>
              </div>
            </div>
          </div>

          {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
          <div className="flex-1">
            <div className="mb-4 md:mb-6">
              <div className="flex flex-wrap items-center gap-2 mb-2">
                <h2 className="text-xl md:text-2xl font-bold text-gray-900">
                  ÂãüÈõÜ‰∏≠„ÅÆCFO‰∏ÄË¶ß
                </h2>
                <div className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full border">
                  „É¶„Éº„Ç∂„Éº: ‰ºÅÊ•≠
                </div>
                <div className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full border">
                  Ë°®Á§∫: CFO„Éá„Éº„Çø
                </div>
                <div className="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full border">
                  Áä∂ÊÖã: {loading ? 'Ë™≠Ëæº‰∏≠' : 'ÂÆå‰∫Ü'}
                </div>
              </div>
              {!loading && (
                <p className="text-gray-600 text-sm md:text-base">
                  {sortedCFOs.length}‰ª∂Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü
                </p>
              )}
              
              {/* „É¢„Éê„Ç§„É´Áî®„ÇΩ„Éº„Éà */}
              <div className="md:hidden mt-3">
                <select 
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
                >
                  {sortOptions.map((option: any) => (
                    <option key={option.value} value={option.value}>{option.label}</option>
                  ))}
                </select>
              </div>
            </div>

            {/* ÈÅ∏Êäû‰∏≠„ÅÆ„Çπ„Ç≠„É´Ë°®Á§∫ */}
            {!loading && selectedSkills.length > 0 && (
              <div className="mb-4">
                <div className="flex flex-wrap gap-2">
                  {selectedSkills.map((skill: string) => (
                    <span 
                      key={skill}
                      className="inline-flex items-center px-3 py-1 rounded-full text-xs bg-blue-100 text-blue-800 border border-blue-200"
                    >
                      {skill}
                      <button 
                        onClick={() => toggleSkill(skill)}
                        className="ml-2 text-blue-600 hover:text-blue-800"
                      >
                        ‚úï
                      </button>
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫ */}
            {loading && (
              <div className="py-12">
                <Loading size="md" text="CFO„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠..." />
              </div>
            )}

            {/* CFO„Éó„É≠„Éï„Ç£„Éº„É´„Ç´„Éº„Éâ */}
            {!loading && (
              <div className="space-y-4 md:space-y-6">
                {sortedCFOs.map((cfo: any) => (
                <div key={cfo.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 md:p-6 hover:shadow-md transition-shadow">
                  {/* „Éò„ÉÉ„ÉÄ„Éº: ÂêçÂâç„ÉªÂ±Ö‰ΩèÂú∞„Éª„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
                  <div className="flex flex-col md:flex-row md:justify-between md:items-start mb-4">
                    <div className="flex-1 min-w-0 mb-3 md:mb-0">
                      <div className="flex items-center gap-3 mb-2 flex-wrap">
                        {/* CFOÂÜôÁúü */}
                        <div className="w-10 h-10 md:w-12 md:h-12 bg-gray-100 rounded-full flex-shrink-0 flex items-center justify-center">
                          {cfo.photoUrl && cfo.photoUrl.startsWith('http') ? (
                            <Image 
                              src={cfo.photoUrl} 
                              alt={cfo.name} 
                              width={48}
                              height={48}
                              className="w-full h-full rounded-full object-cover" 
                              unoptimized={true}
                            />
                          ) : cfo.photoUrl && (cfo.photoUrl.includes('üë®') || cfo.photoUrl.includes('üë©') || cfo.photoUrl.includes('üßë')) ? (
                            <span className="text-lg md:text-xl">{cfo.photoUrl}</span>
                          ) : (
                            <svg className="w-5 h-5 md:w-6 md:h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                            </svg>
                          )}
                        </div>
                        <div>
                          <h3 className="text-lg md:text-xl font-semibold text-gray-900">
                            {cfo.name || 'ÂêçÂâçÊú™Ë®≠ÂÆö'}
                          </h3>
                          <p className="text-gray-600 text-sm">
                            üìç {cfo.location || 'Â±Ö‰ΩèÂú∞Êú™Ë®≠ÂÆö'}
                            {cfo.structured?.fullRemoteAvailable && (
                              <span className="ml-2 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded-full">
                                ÂÆåÂÖ®„É™„É¢„Éº„ÉàÂèØ
                              </span>
                            )}
                          </p>
                        </div>
                      </div>
                    </div>
                    <div className="flex gap-2 flex-wrap md:flex-nowrap">
                      <Link 
                        href={`/cfo/${cfo.id}`}
                        className="flex-1 md:flex-none min-h-[40px] px-3 py-2 border border-blue-500 text-blue-600 rounded-lg text-xs md:text-sm font-medium transition-all duration-200 hover:bg-blue-50 text-center flex items-center justify-center whitespace-nowrap"
                      >
                        üìã Ë©≥Á¥∞„Å∏
                      </Link>
                      <button 
                        onClick={() => handleInterested(cfo)}
                        className={`flex-1 md:flex-none min-h-[40px] px-3 py-2 border text-xs md:text-sm font-medium transition-all duration-200 active:scale-95 rounded-lg flex items-center justify-center whitespace-nowrap ${
                          isInterested(cfo.id)
                            ? 'border-pink-500 bg-pink-500 text-white hover:bg-pink-600 hover:border-pink-600'
                            : 'border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-gray-400'
                        }`}
                      >
                        {isInterested(cfo.id) ? '‚ù§Ô∏è Ê∞ó„Å´„Å™„Çã‰∏≠' : 'ü§ç Ê∞ó„Å´„Å™„Çã'}
                      </button>
                      <Link 
                        href={`/messages?user=${cfo.id}`}
                        className="flex-1 md:flex-none min-h-[40px] px-3 py-2 border border-green-500 text-green-600 rounded-lg text-xs md:text-sm font-medium transition-all duration-200 hover:bg-green-50 text-center flex items-center justify-center whitespace-nowrap"
                      >
                        üí¨ „É°„ÉÉ„Çª„Éº„Ç∏
                      </Link>
                      <button 
                        onClick={() => handleScout(cfo)}
                        className="flex-1 md:flex-none min-h-[40px] px-3 py-2 rounded-lg text-xs md:text-sm font-medium transition-all duration-200 active:scale-95 shadow-md hover:shadow-lg flex items-center justify-center whitespace-nowrap bg-gray-900 text-white hover:bg-gray-800 hover:scale-105"
                      >
                        „Çπ„Ç´„Ç¶„Éà
                      </button>
                    </div>
                  </div>
                  
                  {/* üÜï ÊßãÈÄ†ÂåñÊÉÖÂ†±ÔºàÊúÄÈáçË¶ÅÔºâ */}
                  <div className="mb-4">
                    <div className="flex flex-wrap gap-2 mb-3">
                      {/* Â†±ÈÖ¨ÊÉÖÂ†± */}
                      {cfo.structured?.compensationType && (
                        <div className="px-3 py-1.5 bg-green-100 text-green-800 text-sm rounded-lg font-medium">
                          üí∞ {cfo.structured.compensationType === 'monthly' ? 'ÊúàÈ°çÂà∂' : 'ÂøúÁõ∏Ë´á'}
                          {cfo.structured.compensationType === 'monthly' && cfo.structured.monthlyFeeMin && (
                            <span className="ml-1">
                              {Math.floor(cfo.structured.monthlyFeeMin / 10000)}‰∏áÂÜÜ
                              {cfo.structured.monthlyFeeMax && cfo.structured.monthlyFeeMax !== cfo.structured.monthlyFeeMin ? 
                                `„Äú${Math.floor(cfo.structured.monthlyFeeMax / 10000)}‰∏áÂÜÜ` : '„Äú'}
                            </span>
                          )}
                        </div>
                      )}
                      
                      {/* Á®ºÂÉçÊù°‰ª∂ */}
                      {cfo.structured?.weeklyDays && (
                        <div className="px-3 py-1.5 bg-blue-100 text-blue-800 text-sm rounded-lg font-medium">
                          ‚è∞ ÈÄ±{cfo.structured.weeklyDays}Êó•
                          {cfo.structured.weeklyDaysFlexible && <span className="ml-1">ÔºàÂøúÁõ∏Ë´áÂèØÔºâ</span>}
                        </div>
                      )}
                      
                      {/* ÂØæÂøú„Ç®„É™„Ç¢ */}
                      {cfo.structured?.supportedPrefectures && cfo.structured.supportedPrefectures.length > 0 && (
                        <div className="px-3 py-1.5 bg-purple-100 text-purple-800 text-sm rounded-lg font-medium">
                          üó∫Ô∏è {cfo.structured.supportedPrefectures.map((region: string) => {
                            const regionMap: { [key: string]: string } = {
                              'kanto': 'Èñ¢Êù±',
                              'kansai': 'Èñ¢Ë•ø',
                              'chubu': '‰∏≠ÈÉ®',
                              'tohoku': 'Êù±Âåó',
                              'kyushu': '‰πùÂ∑û',
                              'nationwide': 'ÂÖ®ÂõΩ'
                            }
                            return regionMap[region] || region
                          }).slice(0, 2).join('„Éª')}
                          {cfo.structured.supportedPrefectures.length > 2 && '‰ªñ'}
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Â∞ÇÈñÄ„Çπ„Ç≠„É´ÔºàÈáçË¶Å„Å™„ÇÇ„ÅÆÂÑ™ÂÖàË°®Á§∫Ôºâ */}
                  <div className="mb-4">
                    <p className="text-xs text-gray-500 mb-2">Â∞ÇÈñÄ„Çπ„Ç≠„É´:</p>
                    <div className="flex flex-wrap gap-1 md:gap-2">
                      {cfo.skills.slice(0, 6).map((skill: string, index: number) => (
                        <span key={skill} className={`px-2 py-1 text-xs rounded border ${
                          index < 3 ? 'bg-blue-50 text-blue-700 border-blue-200 font-medium' : 'bg-gray-50 text-gray-700 border-gray-200'
                        }`}>
                          {skill}
                        </span>
                      ))}
                      {cfo.skills.length > 6 && (
                        <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded">
                          +{cfo.skills.length - 6}ÂÄã
                        </span>
                      )}
                    </div>
                  </div>

                  {/* Á∞°ÊΩî„Å™Á¥π‰ªãÊñá */}
                  <div>
                    <p className="text-xs text-gray-500 mb-1">Á¥π‰ªã:</p>
                    <p className="text-gray-700 text-sm line-clamp-2 leading-relaxed">
                      {cfo.introduction || 'ÁµåÈ®ìË±äÂØå„Å™CFO„Å®„Åó„Å¶„ÄÅ‰ºÅÊ•≠„ÅÆË≤°ÂãôÊà¶Áï•„Çí„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ'}
                    </p>
                  </div>

                  {/* Ë©≥Á¥∞ÊÉÖÂ†±ÔºàÊäò„ÇäÁï≥„ÅøÂèØËÉΩÔºâ */}
                  <details className="mt-3">
                    <summary className="text-xs text-blue-600 cursor-pointer hover:text-blue-800">
                      Ë©≥Á¥∞ÊÉÖÂ†±„ÇíË°®Á§∫
                    </summary>
                    <div className="mt-2 pt-2 border-t border-gray-100 space-y-2">
                      {/* ‰øùÊúâË≥áÊ†º */}
                      <div>
                        <span className="text-xs text-gray-500">‰øùÊúâË≥áÊ†º:</span>
                        <p className="text-gray-600 text-xs">{cfo.certifications || 'Êú™Ë®≠ÂÆö'}</p>
                      </div>
                      
                      {/* „ÉÜ„Ç≠„Çπ„Éà„Éô„Éº„Çπ„ÅÆË©≥Á¥∞ÊÉÖÂ†± */}
                      {cfo.compensation && (
                        <div>
                          <span className="text-xs text-gray-500">Â†±ÈÖ¨Ë©≥Á¥∞:</span>
                          <p className="text-gray-600 text-xs">{cfo.compensation}</p>
                        </div>
                      )}
                      
                      {cfo.workingAreas && (
                        <div>
                          <span className="text-xs text-gray-500">„Ç®„É™„Ç¢Ë©≥Á¥∞:</span>
                          <p className="text-gray-600 text-xs">{cfo.workingAreas}</p>
                        </div>
                      )}
                    </div>
                  </details>
                </div>
                ))}
              </div>
            )}

            {/* Ê§úÁ¥¢ÁµêÊûú„Åå0‰ª∂„ÅÆÂ†¥Âêà */}
            {!loading && sortedCFOs.length === 0 && (
              <div className="text-center py-12">
                <div className="text-6xl mb-4">üîç</div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">Ë©≤ÂΩì„Åô„ÇãCFO„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü</h3>
                <p className="text-gray-600 mb-4">Ê§úÁ¥¢Êù°‰ª∂„ÇíÂ§âÊõ¥„Åó„Å¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ</p>
                <button 
                  onClick={() => {
                    setSearchQuery('')
                    setSelectedSkills([])
                    setSelectedRegion('')
                    setSelectedWorkStyle('')
                    setSelectedCompensation('')
                  }}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Êù°‰ª∂„Çí„É™„Çª„ÉÉ„Éà
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
      </div>

      {/* Scout Modal */}
      {showScoutModal && selectedCFO && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 animate-fade-in">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6 transform transition-all duration-300 scale-100 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900">üéØ „Çπ„Ç´„Ç¶„ÉàÈÄÅ‰ø°</h3>
              <button 
                onClick={() => setShowScoutModal(false)}
                className="text-gray-400 hover:text-gray-600 text-xl"
              >
                ‚úï
              </button>
            </div>
            
            <div className="mb-4">
              <div className="flex items-center space-x-3 mb-3">
                <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center text-lg">
                  {selectedCFO.photoUrl}
                </div>
                <div>
                  <p className="font-medium text-gray-900">{selectedCFO.name}</p>
                  <p className="text-sm text-gray-600">{selectedCFO.nickname}</p>
                </div>
              </div>
              
              <p className="text-sm text-gray-600 mb-4">„Åì„ÅÆCFO„Å´„Çπ„Ç´„Ç¶„Éà„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô„ÅãÔºü</p>
              
              <textarea
                placeholder="„Çπ„Ç´„Ç¶„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
                className="w-full h-24 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm resize-none"
              />
            </div>
            
            <div className="flex space-x-3">
              <button 
                onClick={() => setShowScoutModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 text-sm"
              >
                „Ç≠„É£„É≥„Çª„É´
              </button>
              <button 
                onClick={sendScout}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm"
              >
                ÈÄÅ‰ø°
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Toast Notification */}
      {showToast && (
        <div className="fixed bottom-4 right-4 bg-gray-900 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-fade-in">
          {toastMessage}
        </div>
      )}
    </>
  )
}