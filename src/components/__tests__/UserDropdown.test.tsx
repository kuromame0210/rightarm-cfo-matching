import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import UserDropdown from '../UserDropdown'

describe('UserDropdown', () => {
  const defaultProps = {
    userName: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',
    userEmail: 'test@example.com',
    userAvatar: 'üë§',
    showUserMenu: false,
    onToggleUserMenu: jest.fn(),
    onCloseUserMenu: jest.fn(),
  }

  beforeEach(() => {
    jest.clearAllMocks()
  })

  describe('Âü∫Êú¨Ë°®Á§∫', () => {
    it('„É¶„Éº„Ç∂„Éº„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<UserDropdown {...defaultProps} />)
      expect(screen.getByText('„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº')).toBeInTheDocument()
      expect(screen.getByText('üë§')).toBeInTheDocument()
    })

    it('„É¶„Éº„Ç∂„Éº„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®onToggleUserMenu„ÅåÂëº„Å∞„Çå„Çã', async () => {
      const user = userEvent.setup()
      render(<UserDropdown {...defaultProps} />)
      
      const userButton = screen.getByText('„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº').closest('button')
      await user.click(userButton!)
      
      expect(defaultProps.onToggleUserMenu).toHaveBeenCalledTimes(1)
    })

    it('„Éá„Éï„Ç©„É´„Éà„Éó„É≠„ÉÉ„Éó„Çπ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', () => {
      const minimalProps = {
        showUserMenu: false,
        onToggleUserMenu: jest.fn(),
        onCloseUserMenu: jest.fn(),
      }
      render(<UserDropdown {...minimalProps} />)
      
      expect(screen.getByText('Â±±Áî∞„Åï„Çì')).toBeInTheDocument()
      expect(screen.getByText('üë§')).toBeInTheDocument()
    })
  })

  describe('„Éâ„É≠„ÉÉ„Éó„ÉÄ„Ç¶„É≥„É°„Éã„É•„Éº', () => {
    const propsWithMenuOpen = {
      ...defaultProps,
      showUserMenu: true,
    }

    it('showUserMenu„Ååtrue„ÅÆÊôÇ„Å´„Éâ„É≠„ÉÉ„Éó„ÉÄ„Ç¶„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<UserDropdown {...propsWithMenuOpen} />)
      
      expect(screen.getAllByText('„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº')).toHaveLength(2) // „Éú„Çø„É≥„Å®„É°„Éã„É•„ÉºÂÜÖ
      expect(screen.getByText('test@example.com')).toBeInTheDocument()
      expect(screen.getByText('„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ')).toBeInTheDocument()
      expect(screen.getByText('Ë®≠ÂÆö')).toBeInTheDocument()
      expect(screen.getByText('„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£')).toBeInTheDocument()
      expect(screen.getByText('„É≠„Ç∞„Ç¢„Ç¶„Éà')).toBeInTheDocument()
    })

    it('showUserMenu„Ååfalse„ÅÆÊôÇ„Å´„Éâ„É≠„ÉÉ„Éó„ÉÄ„Ç¶„É≥„ÅåÈùûË°®Á§∫„Å´„Å™„Çã', () => {
      render(<UserDropdown {...defaultProps} />)
      
      expect(screen.queryByText('test@example.com')).not.toBeInTheDocument()
      expect(screen.queryByText('„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ')).not.toBeInTheDocument()
    })

    it('„É°„Éã„É•„ÉºÈ†ÖÁõÆ„Å´Ê≠£„Åó„ÅÑ„É™„É≥„ÇØ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      render(<UserDropdown {...propsWithMenuOpen} />)
      
      const profileLink = screen.getByText('„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ').closest('a')
      expect(profileLink).toHaveAttribute('href', '/profile')
      
      const settingsLink = screen.getByText('Ë®≠ÂÆö').closest('a')
      expect(settingsLink).toHaveAttribute('href', '/settings')
      
      const activityLink = screen.getByText('„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£').closest('a')
      expect(activityLink).toHaveAttribute('href', '/activity')
      
      const logoutLink = screen.getByText('„É≠„Ç∞„Ç¢„Ç¶„Éà').closest('a')
      expect(logoutLink).toHaveAttribute('href', '/')
    })

    it('„É°„Éã„É•„ÉºÈ†ÖÁõÆ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®onCloseUserMenu„ÅåÂëº„Å∞„Çå„Çã', async () => {
      const user = userEvent.setup()
      render(<UserDropdown {...propsWithMenuOpen} />)
      
      const profileLink = screen.getByText('„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ')
      await user.click(profileLink)
      
      expect(defaultProps.onCloseUserMenu).toHaveBeenCalledTimes(1)
    })
  })

  describe('Â§ñÈÉ®„ÇØ„É™„ÉÉ„ÇØÊ§úÁü•', () => {
    it('„É°„Éã„É•„ÉºÂ§ñ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®onCloseUserMenu„ÅåÂëº„Å∞„Çå„Çã', async () => {
      const user = userEvent.setup()
      const propsWithMenuOpen = {
        ...defaultProps,
        showUserMenu: true,
      }
      
      render(
        <div>
          <UserDropdown {...propsWithMenuOpen} />
          <div data-testid="outside">Â§ñÈÉ®Ë¶ÅÁ¥†</div>
        </div>
      )
      
      const outsideElement = screen.getByTestId('outside')
      await user.click(outsideElement)
      
      expect(defaultProps.onCloseUserMenu).toHaveBeenCalledTimes(1)
    })

    it('„É°„Éã„É•„ÉºÂÜÖ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„ÇÇonCloseUserMenu„ÅåÂëº„Å∞„Çå„Å™„ÅÑ', async () => {
      const user = userEvent.setup()
      const propsWithMenuOpen = {
        ...defaultProps,
        showUserMenu: true,
      }
      
      render(<UserDropdown {...propsWithMenuOpen} />)
      
      const menuContainer = screen.getByText('test@example.com').closest('div')
      await user.click(menuContainer!)
      
      expect(defaultProps.onCloseUserMenu).not.toHaveBeenCalled()
    })
  })

  describe('„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£', () => {
    it('„É¶„Éº„Ç∂„Éº„Éú„Çø„É≥„Åå„Éú„Çø„É≥Ë¶ÅÁ¥†„Å®„Åó„Å¶Ê≠£„Åó„ÅèË™çË≠ò„Åï„Çå„Çã', () => {
      render(<UserDropdown {...defaultProps} />)
      
      const userButton = screen.getByRole('button')
      expect(userButton).toBeInTheDocument()
      expect(userButton).toHaveTextContent('„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº')
    })

    it('„É°„Éã„É•„ÉºÈ†ÖÁõÆ„Åå„É™„É≥„ÇØ„Å®„Åó„Å¶Ê≠£„Åó„ÅèË™çË≠ò„Åï„Çå„Çã', () => {
      const propsWithMenuOpen = {
        ...defaultProps,
        showUserMenu: true,
      }
      render(<UserDropdown {...propsWithMenuOpen} />)
      
      const links = screen.getAllByRole('link')
      expect(links).toHaveLength(4) // „Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ„ÄÅË®≠ÂÆö„ÄÅ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„ÄÅ„É≠„Ç∞„Ç¢„Ç¶„Éà
      
      const linkTexts = links.map(link => link.textContent)
      expect(linkTexts).toContain('„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ')
      expect(linkTexts).toContain('Ë®≠ÂÆö')
      expect(linkTexts).toContain('„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£')
      expect(linkTexts).toContain('„É≠„Ç∞„Ç¢„Ç¶„Éà')
    })
  })

  describe('„Çπ„Çø„Ç§„É™„É≥„Ç∞', () => {
    it('„É¶„Éº„Ç∂„Éº„Éú„Çø„É≥„Å´ÈÅ©Âàá„Å™„Çπ„Çø„Ç§„É´„ÇØ„É©„Çπ„ÅåÈÅ©Áî®„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      render(<UserDropdown {...defaultProps} />)
      
      const userButton = screen.getByRole('button')
      expect(userButton).toHaveClass('flex', 'items-center', 'text-gray-700')
    })

    it('„Éâ„É≠„ÉÉ„Éó„ÉÄ„Ç¶„É≥„É°„Éã„É•„Éº„Å´ÈÅ©Âàá„Å™z-index„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      const propsWithMenuOpen = {
        ...defaultProps,
        showUserMenu: true,
      }
      render(<UserDropdown {...propsWithMenuOpen} />)
      
      const dropdown = document.querySelector('.z-\\[9999\\]')
      expect(dropdown).toBeInTheDocument()
    })

    it('„É°„Éã„É•„ÉºÈ†ÖÁõÆ„Å´„Éõ„Éê„ÉºÂäπÊûú„ÅÆ„ÇØ„É©„Çπ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      const propsWithMenuOpen = {
        ...defaultProps,
        showUserMenu: true,
      }
      render(<UserDropdown {...propsWithMenuOpen} />)
      
      const profileLink = screen.getByText('„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ')
      expect(profileLink).toHaveClass('hover:bg-gray-100')
    })
  })
})