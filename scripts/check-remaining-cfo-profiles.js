#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function checkRemainingCFOProfiles() {
  try {
    // CFO„Éó„É≠„Éï„Ç£„Éº„É´„ÇíÂèñÂæó
    const { data: profiles, error } = await supabase
      .from('cfo_profiles')
      .select('*')
      .order('created_at', { ascending: false });
      
    if (error) {
      console.error('Error:', error);
      return;
    }

    // auth.users„ÉÜ„Éº„Éñ„É´„Åã„ÇâÂØæÂøú„Åô„Çã„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂèñÂæó
    const userIds = profiles.map(p => p.cfo_user_id);
    const { data: users, error: userError } = await supabase
      .auth.admin.listUsers();

    if (userError) {
      console.error('User Error:', userError);
      return;
    }

    // „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞„Çí‰ΩúÊàê
    const emailMap = {};
    if (users && users.users) {
      users.users.forEach(user => {
        emailMap[user.id] = user.email;
      });
    }

    console.log('=== ÂÖ®CFO„Éó„É≠„Éï„Ç£„Éº„É´Ë™øÊüª ===');
    console.log('Á∑è‰ª∂Êï∞:', profiles.length);
    console.log('');

    // „É°„Ç§„É≥„ÅÆ6Âêç„ÅÆÂà§ÂÆö
    const mainSixNames = ['‰ΩêËó§Â§ßÊÇü', 'Â••Áî∞Ë±ä', '‰ΩêËó§Êô∫ÂΩ¶', 'ËèÖÂéüÂ§ßÊ∫ê', 'ÂâØÂ≥∂', 'Áî∞‰∏≠'];
    const mainSixProfiles = [];
    const otherProfiles = [];

    profiles.forEach((profile, index) => {
      const isMainSix = mainSixNames.some(name => 
        profile.cfo_name && profile.cfo_name.includes(name)
      );
      
      // „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíËøΩÂä†
      profile.email = emailMap[profile.cfo_user_id] || '„Å™„Åó';
      
      if (isMainSix) {
        mainSixProfiles.push(profile);
      } else {
        otherProfiles.push(profile);
      }
    });

    console.log('üéØ „É°„Ç§„É≥„ÅÆ6Âêç„Éó„É≠„Éï„Ç£„Éº„É´Êï∞:', mainSixProfiles.length);
    console.log('‚ùì „Åù„ÅÆ‰ªñ„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´Êï∞:', otherProfiles.length);
    console.log('');

    console.log('=== „Åù„ÅÆ‰ªñ„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´Ë©≥Á¥∞ ===');
    otherProfiles.forEach((profile, index) => {
      console.log(`--- „Åù„ÅÆ‰ªñ ${index + 1} ---`);
      console.log('ID:', profile.cfo_user_id);
      console.log('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ:', profile.email);
      console.log('ÂêçÂâç:', profile.cfo_name);
      console.log('Ë°®Á§∫Âêç:', profile.cfo_display_name);
      console.log('Â†¥ÊâÄ:', profile.cfo_location);
      console.log('„Çπ„Ç≠„É´Êï∞:', Array.isArray(profile.cfo_skills) ? profile.cfo_skills.length : 0);
      console.log('„Çπ„Ç≠„É´:', profile.cfo_skills);
      console.log('Â†±ÈÖ¨:', profile.cfo_compensation);
      console.log('Á®ºÂÉçÊù°‰ª∂:', profile.cfo_availability);
      console.log('Á¥π‰ªãÊñá:', profile.cfo_introduction);
      console.log('ÁµåÊ≠¥:', profile.cfo_raw_profile ? profile.cfo_raw_profile.substring(0, 100) + '...' : '„Å™„Åó');
      console.log('‰ΩúÊàêÊó•:', profile.created_at);
      console.log('Êõ¥Êñ∞Êó•:', profile.updated_at);
      console.log('');
    });

    console.log('=== ÂÖ®„Éó„É≠„Éï„Ç£„Éº„É´‰∏ÄË¶ßÔºà„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ‰ªò„ÅçÔºâ ===');
    profiles.forEach((profile, index) => {
      const isMainSix = mainSixNames.some(name => 
        profile.cfo_name && profile.cfo_name.includes(name)
      );
      
      console.log(`${index + 1}. ${profile.cfo_name || 'ÂêçÂâç„Å™„Åó'} (${profile.email}) ${isMainSix ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ID: ${profile.cfo_user_id}`);
      console.log(`   ‰ΩúÊàêÊó•: ${profile.created_at}`);
      console.log('');
    });

    console.log('=== „É°„Ç§„É≥„ÅÆ6Âêç„ÅÆÈáçË§áÁ¢∫Ë™ç ===');
    const nameCount = {};
    mainSixProfiles.forEach(profile => {
      const name = profile.cfo_name;
      nameCount[name] = (nameCount[name] || 0) + 1;
    });

    Object.entries(nameCount).forEach(([name, count]) => {
      if (count > 1) {
        console.log(`‚ö†Ô∏è  ${name}: ${count}‰ª∂„ÅÆÈáçË§á`);
      } else {
        console.log(`‚úÖ ${name}: 1‰ª∂`);
      }
    });

  } catch (error) {
    console.error('„Ç®„É©„Éº:', error);
  }
}

checkRemainingCFOProfiles();