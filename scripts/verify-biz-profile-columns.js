#!/usr/bin/env node

/**
 * biz_profiles„ÉÜ„Éº„Éñ„É´„ÅÆË©≥Á¥∞„Ç´„É©„É†ËøΩÂä†ÂÆå‰∫ÜÁ¢∫Ë™ç„Çπ„ÇØ„É™„Éó„Éà
 * 2025-07-15: „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÂæå„ÅÆÊ§úË®ºÁî®
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function verifyBizProfileColumns() {
  console.log('üîç biz_profiles„ÉÜ„Éº„Éñ„É´„ÅÆË©≥Á¥∞„Ç´„É©„É†ËøΩÂä†ÂÆå‰∫ÜÁ¢∫Ë™ç...\n')
  
  try {
    // 1. „Ç´„É©„É†„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    const { data: testData, error: testError } = await supabase
      .from('biz_profiles')
      .select('*')
      .limit(1)
    
    if (testError) {
      console.error('‚ùå „ÉÜ„Éº„Éñ„É´„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº:', testError)
      return
    }
    
    const currentColumns = testData && testData.length > 0 ? Object.keys(testData[0]) : []
    const targetColumns = ['biz_description', 'biz_revenue_range', 'biz_challenge_background']
    
    console.log('üìä ÁèæÂú®„ÅÆ„Ç´„É©„É†:')
    console.log('   ', currentColumns.join(', '))
    
    console.log('\nüéØ ÂøÖË¶Å„Å™„Ç´„É©„É†„ÅÆÁ¢∫Ë™ç:')
    let allColumnsExist = true
    targetColumns.forEach(col => {
      const exists = currentColumns.includes(col)
      console.log(`   ${col}: ${exists ? '‚úÖ Â≠òÂú®' : '‚ùå ‰∏çÂ≠òÂú®'}`)
      if (!exists) allColumnsExist = false
    })
    
    if (allColumnsExist) {
      console.log('\n‚úÖ „Åô„Åπ„Å¶„ÅÆÂøÖË¶Å„Å™„Ç´„É©„É†„ÅåÂ≠òÂú®„Åó„Åæ„ÅôÔºÅ')
      
      // 2. Êó¢Â≠ò„Éá„Éº„Çø„ÅÆÁßªË°åÂÆüË°å
      console.log('\nüìã Êó¢Â≠ò„Éá„Éº„Çø„ÅÆÁßªË°å„ÇíÂÆüË°å‰∏≠...')
      
      const { data: profiles, error: profilesError } = await supabase
        .from('biz_profiles')
        .select('*')
      
      if (profilesError) {
        console.error('‚ùå „Éó„É≠„Éï„Ç£„Éº„É´„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', profilesError)
        return
      }
      
      let migrationCount = 0
      
      for (const profile of profiles) {
        const updateData = {}
        
        // Êó¢Â≠ò„Éá„Éº„Çø„Åã„ÇâË©≥Á¥∞È†ÖÁõÆ„ÇíÁîüÊàê
        if (!profile.biz_description && profile.biz_raw_profile) {
          updateData.biz_description = profile.biz_raw_profile.substring(0, 500)
        }
        
        if (!profile.biz_revenue_range && profile.biz_revenue_min && profile.biz_revenue_max) {
          const formatAmount = (amount) => {
            if (amount >= 1000000000) return `${Math.floor(amount / 1000000000)}ÂÑÑÂÜÜ`
            if (amount >= 100000000) return `${Math.floor(amount / 100000000)}ÂçÉ‰∏áÂÜÜ`
            if (amount >= 10000000) return `${Math.floor(amount / 10000000)}Áôæ‰∏áÂÜÜ`
            return `${amount}ÂÜÜ`
          }
          updateData.biz_revenue_range = `${formatAmount(profile.biz_revenue_min)} „Äú ${formatAmount(profile.biz_revenue_max)}`
        }
        
        if (!profile.biz_challenge_background && profile.biz_issues && Array.isArray(profile.biz_issues) && profile.biz_issues.length > 0) {
          updateData.biz_challenge_background = `‰∏ªË¶ÅË™≤È°å: ${profile.biz_issues.join(', ')}`
        }
        
        // Êõ¥Êñ∞„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅÆ„ÅøÂÆüË°å
        if (Object.keys(updateData).length > 0) {
          const { error: updateError } = await supabase
            .from('biz_profiles')
            .update(updateData)
            .eq('biz_user_id', profile.biz_user_id)
          
          if (updateError) {
            console.log(`   ‚ö†Ô∏è  ${profile.biz_company_name} „ÅÆÊõ¥Êñ∞„Ç®„É©„Éº: ${updateError.message}`)
          } else {
            console.log(`   ‚úÖ ${profile.biz_company_name} „ÅÆË©≥Á¥∞È†ÖÁõÆ„ÇíÊõ¥Êñ∞`)
            migrationCount++
          }
        }
      }
      
      console.log(`\nüìà ÁßªË°åÂÆå‰∫Ü: ${migrationCount}‰ª∂„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´„ÇíÊõ¥Êñ∞`)
      
      // 3. ÊúÄÁµÇÁ¢∫Ë™ç
      console.log('\nüìã ÊúÄÁµÇÁ¢∫Ë™ç:')
      const { data: finalData, error: finalError } = await supabase
        .from('biz_profiles')
        .select('biz_company_name, biz_description, biz_revenue_range, biz_challenge_background')
        .limit(3)
      
      if (!finalError && finalData) {
        finalData.forEach((record, index) => {
          console.log(`\n   „Äê‰ºÅÊ•≠ ${index + 1}„Äë ${record.biz_company_name}`)
          console.log(`     ‰∫ãÊ•≠ÂÜÖÂÆπ: ${record.biz_description?.substring(0, 100) || 'Êú™Ë®≠ÂÆö'}...`)
          console.log(`     Â£≤‰∏äË¶èÊ®°: ${record.biz_revenue_range || 'Êú™Ë®≠ÂÆö'}`)
          console.log(`     ÁµåÂñ∂Ë™≤È°å: ${record.biz_challenge_background || 'Êú™Ë®≠ÂÆö'}`)
        })
      }
      
    } else {
      console.log('\n‚ùå „Ç´„É©„É†„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô')
      console.log('Supabase Dashboard > SQL Editor „Åß‰ª•‰∏ã„ÅÆSQL„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:')
      console.log('')
      console.log('ALTER TABLE biz_profiles ADD COLUMN IF NOT EXISTS biz_description TEXT;')
      console.log('ALTER TABLE biz_profiles ADD COLUMN IF NOT EXISTS biz_revenue_range TEXT;')
      console.log('ALTER TABLE biz_profiles ADD COLUMN IF NOT EXISTS biz_challenge_background TEXT;')
    }
    
  } catch (error) {
    console.error('‚ùå Ê§úË®ºÂá¶ÁêÜ„Ç®„É©„Éº:', error)
  }
}

// ÂÆüË°å
if (require.main === module) {
  verifyBizProfileColumns()
}

module.exports = { verifyBizProfileColumns }